# Terraform AWS VPC Configuration Guide

## Overview
This guide provides instructions for generating Terraform code to create a modular AWS VPC infrastructure with proper security, networking, and state management.

## Architecture Requirements

### 1. Modular Approach
- Create separate modules for each component:
  - `modules/vpc/` - Main VPC and subnets
  - `modules/security-groups/` - Security group configurations
  - `modules/vpc-endpoints/` - S3 and DynamoDB private endpoints
  - `modules/iam/` - IAM roles and policies
  - `modules/backend/` - Terraform backend configuration

### 2. VPC Configuration
- **Variable**: `vpc_cidr` with default value `10.0.0.0/16`
- **Location**: `variables.tf` in root directory
- **Usage**: Pass to VPC module

### 3. Subnet Architecture (3 AZs)
Create subnets across 3 availability zones:

#### Public Subnets
- **CIDR Pattern**: `10.0.{1,2,3}.0/24` (one per AZ)
- **Purpose**: Internet-facing resources (ALB, NAT Gateway)
- **Route Table**: Routes to Internet Gateway

#### Private Subnets
- **CIDR Pattern**: `10.0.{11,12,13}.0/24` (one per AZ)
- **Purpose**: Application servers, internal services
- **Route Table**: Routes to NAT Gateway

#### Database Subnets
- **CIDR Pattern**: `10.0.{21,22,23}.0/24` (one per AZ)
- **Purpose**: RDS, ElastiCache, other databases
- **Route Table**: Routes to NAT Gateway (no direct internet access)

### 4. Security Groups
Implement security groups with minimal access:

#### Default Rules
- **Inbound**: Port 443 (HTTPS) only
- **Outbound**: All traffic (0.0.0.0/0)

#### Security Group Structure
- `sg_public` - For public subnets
- `sg_private` - For private subnets  
- `sg_database` - For database subnets
- `sg_vpc_endpoints` - For VPC endpoints

#### Security Group Rules
```hcl
# Example security group rule
ingress {
  from_port   = 443
  to_port     = 443
  protocol    = "tcp"
  cidr_blocks = ["10.0.0.0/16"]  # VPC CIDR only
}
```

### 5. VPC Endpoints
Create private endpoints for AWS services:
- **S3 Endpoint**: `com.amazonaws.region.s3`
- **DynamoDB Endpoint**: `com.amazonaws.region.dynamodb`
- **Location**: Private subnets only
- **Security Group**: `sg_vpc_endpoints`

### 6. IAM Configuration
Use IAM roles for Terraform execution:

#### Required IAM Permissions
```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ec2:*",
        "iam:*",
        "s3:*",
        "dynamodb:*",
        "logs:*"
      ],
      "Resource": "*"
    }
  ]
}
```

#### IAM Role Structure
- **Role Name**: `terraform-vpc-role`
- **Trust Policy**: Allow EC2 or specific AWS accounts
- **Attached Policies**: Custom policy with minimal required permissions

### 7. Terraform Backend Configuration
Configure DynamoDB for state locking:

#### Backend Configuration
```hcl
terraform {
  backend "s3" {
    bucket         = "your-terraform-state-bucket"
    key            = "vpc/terraform.tfstate"
    region         = "us-west-2"
    dynamodb_table = "terraform-state-lock"
    encrypt        = true
  }
}
```

#### DynamoDB Table
- **Table Name**: `terraform-state-lock`
- **Primary Key**: `LockID` (String)
- **Billing Mode**: Pay per request

### 8. S3 Bucket Configuration
- **Variable**: `terraform_state_bucket` (required, no default)
- **Location**: `variables.tf`
- **Usage**: Backend configuration and bootstrap script

### 9. Security Best Practices
**NEVER create secrets via Terraform:**
- Use AWS Secrets Manager or Parameter Store for secrets
- Pass secrets as variables from external sources
- Use data sources to reference existing secrets
- Implement proper IAM policies for secret access

### 10. Bootstrap Script
Create `scripts/bootstrap.sh` with the following functionality:

#### Bootstrap Script Requirements
```bash
#!/bin/bash
# Bootstrap script for Terraform AWS VPC setup

# Variables
BUCKET_NAME=""
IAM_ROLE_NAME="terraform-vpc-role"
DYNAMODB_TABLE="terraform-state-lock"
REGION="us-west-2"

# Functions
create_s3_bucket() {
    # Create S3 bucket for Terraform state
    # Enable versioning and encryption
    # Configure bucket policy
}

create_dynamodb_table() {
    # Create DynamoDB table for state locking
    # Configure with LockID as primary key
}

create_iam_role() {
    # Create IAM role for Terraform
    # Attach necessary policies
    # Configure trust relationship
}

# Main execution
main() {
    # Validate inputs
    # Create resources in order
    # Output configuration values
}
```

#### Bootstrap Output
The script should output:
- S3 bucket name
- IAM role ARN
- DynamoDB table name
- Region

## File Structure
```
terraform-vpc/
├── main.tf                 # Main configuration
├── variables.tf            # Variable definitions
├── outputs.tf              # Output values
├── providers.tf            # Provider configuration
├── backend.tf              # Backend configuration
├── modules/
│   ├── vpc/
│   │   ├── main.tf
│   │   ├── variables.tf
│   │   └── outputs.tf
│   ├── security-groups/
│   │   ├── main.tf
│   │   ├── variables.tf
│   │   └── outputs.tf
│   ├── vpc-endpoints/
│   │   ├── main.tf
│   │   ├── variables.tf
│   │   └── outputs.tf
│   └── iam/
│       ├── main.tf
│       ├── variables.tf
│       └── outputs.tf
├── scripts/
│   └── bootstrap.sh        # Bootstrap script
├── terraform.tfvars.example # Example variable values
└── README.md               # Documentation
```

## Implementation Guidelines

### Variable Definitions
```hcl
variable "vpc_cidr" {
  description = "CIDR block for VPC"
  type        = string
  default     = "10.0.0.0/16"
}

variable "terraform_state_bucket" {
  description = "S3 bucket name for Terraform state"
  type        = string
}

variable "aws_region" {
  description = "AWS region"
  type        = string
  default     = "us-west-2"
}
```

### Module Usage
```hcl
module "vpc" {
  source = "./modules/vpc"
  
  vpc_cidr    = var.vpc_cidr
  environment = var.environment
}

module "security_groups" {
  source = "./modules/security-groups"
  
  vpc_id = module.vpc.vpc_id
}
```

### Output Values
```hcl
output "vpc_id" {
  description = "VPC ID"
  value       = module.vpc.vpc_id
}

output "private_subnet_ids" {
  description = "Private subnet IDs"
  value       = module.vpc.private_subnet_ids
}
```

## Security Considerations

### Network Security
- All subnets use security groups with minimal access
- Private subnets have no direct internet access
- Database subnets are isolated from public access
- VPC endpoints provide secure AWS service access

### IAM Security
- Use least privilege principle for IAM roles
- Implement proper trust relationships
- Use temporary credentials when possible
- Audit IAM permissions regularly

### State Security
- Enable encryption on S3 bucket
- Use DynamoDB for state locking
- Implement proper bucket policies
- Use separate state files for different environments

## Deployment Process

1. **Bootstrap Phase**:
   ```bash
   cd scripts/
   ./bootstrap.sh --bucket-name your-bucket-name
   ```

2. **Terraform Initialization**:
   ```bash
   terraform init
   ```

3. **Plan and Apply**:
   ```bash
   terraform plan
   terraform apply
   ```

## Validation Checklist

- [ ] VPC CIDR is configurable with default value
- [ ] 3 AZ subnet setup (public, private, database)
- [ ] Security groups restrict to port 443 only
- [ ] VPC endpoints for S3 and DynamoDB
- [ ] IAM roles configured for Terraform
- [ ] DynamoDB state locking configured
- [ ] S3 bucket name is variable
- [ ] No secrets created in Terraform
- [ ] Bootstrap script creates required resources
- [ ] Modular structure implemented

## Notes for LLMs

When generating Terraform code:
1. Always use the modular approach specified
2. Implement proper variable validation
3. Use data sources for existing resources
4. Include proper documentation in comments
5. Follow AWS best practices for security
6. Use consistent naming conventions
7. Implement proper error handling
8. Include example configurations
9. Validate all resource dependencies
10. Ensure idempotent operations
description:
globs:
alwaysApply: false
---
