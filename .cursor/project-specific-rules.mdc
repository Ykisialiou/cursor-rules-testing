---
alwaysApply: true
---
#  Specific Instructions for LLM

## Overview
This document provides specific implementation details for CI/CD pipelines. Use this in conjunction with the generic CI/CD instructions to create comprehensive GitLab CI/CD pipelines.

## GitLab CI/CD File Structure

### 1. Basic GitLab CI/CD File
Create a `.gitlab-ci.yml` file in the root directory with the following structure:

```yaml
# GitLab CI/CD Pipeline Configuration
stages:
  - {application_name}-build
  - {application_name}-test
  - {application_name}-security
  - {application_name}-container-build
  - {application_name}-deploy

# Global variables
variables:
  # Application name for stage naming
  APPLICATION_NAME: $CI_PROJECT_NAME
```

## GitLab-Specific Requirements

### 2. Naming Convention and Branching Strategy

#### 2.1 Stage Naming Convention
- **MANDATORY**: All stages must follow the pattern: `{application_name}-{stagename}`
- **Example**: `my-app-build`, `backend-service-test`, `api-gateway-deploy`
- **Implementation**: Replace `{application_name}` with the actual repository name

#### 2.2 Branching Strategy
- **Allowed branches**: Only `feature/*` branches and `main` branch
- **Blocked branches**: All other branches (develop, staging, hotfix, etc.)
- **Ticket number validation**: Feature branches must contain ticket numbers in format `feature/TICKET-123` or `feature/123-description`

#### 2.3 Branch Validation Rules
```yaml
.branch_validation:
  before_script:
    - |
      # Validate ticket number pattern for feature branches
      if [[ $CI_COMMIT_BRANCH =~ ^feature/ ]]; then
        TICKET_PATTERN="^feature/[A-Z]+-[0-9]+|^feature/[0-9]+"
        if [[ ! $CI_COMMIT_BRANCH =~ $TICKET_PATTERN ]]; then
          echo "Error: Feature branch must contain ticket number (e.g., feature/TICKET-123 or feature/123-description)"
          echo "Current branch: $CI_COMMIT_BRANCH"
          exit 1
        fi
        echo "Feature branch validation passed: $CI_COMMIT_BRANCH"
      elif [[ $CI_COMMIT_BRANCH == "main" ]]; then
        echo "Main branch detected: $CI_COMMIT_BRANCH"
      else
        echo "Branch not allowed: $CI_COMMIT_BRANCH"
        echo "Only 'main' and 'feature/*' branches are allowed"
        exit 1
      fi
```

#### 2.4 Variable Naming Standards
- **MANDATORY**: All variables must start with capital letter A and follow camelCase
- **Format**: `A{DescriptiveName}`
- **Examples**:
  - `ApplicationName` ✅
  - `ApiEndpoint` ✅
  - `DatabaseConnectionString` ✅
  - `MaxRetryAttempts` ✅
  - `application_name` ❌ (snake_case)
  - `apiEndpoint` ❌ (doesn't start with A)
  - `API_ENDPOINT` ❌ (UPPER_SNAKE_CASE)

**Implementation Guidelines**:
```yaml
variables:
  # ✅ Correct variable naming
  ApplicationName: "my-application"
  ApiVersion: "v1.0.0"
  DatabaseUrl: "postgresql://localhost:5432/mydb"
  MaxConnectionPoolSize: 10
  EnableDebugMode: true
  
  # ❌ Incorrect variable naming
  application_name: "my-application"  # snake_case
  api_version: "v1.0.0"              # snake_case
  DATABASE_URL: "postgresql://..."    # UPPER_SNAKE_CASE
  maxConnectionPoolSize: 10           # doesn't start with A
```

### 3. Kaniko Configuration

#### 3.1 Kaniko Setup
```yaml
variables:
  # Kaniko configuration
  KANIKO_VERSION: "v1.9.1"
  KANIKO_EXECUTOR: "gcr.io/kaniko-project/executor:${KANIKO_VERSION}"
```

#### 3.2 Kaniko Usage in Jobs
```yaml
container-build:
  stage: {application_name}-container-build
  image: $PIPELINE_IMAGE_REGISTRY/kaniko:latest
  before_script:
    - echo $REGISTRY_PASSWORD | kaniko login -u $REGISTRY_USER --password-stdin $REGISTRY_URL
  script:
    - |
      /kaniko/executor \
        --context $CI_PROJECT_DIR \
        --dockerfile $CI_PROJECT_DIR/Dockerfile \
        --destination $REGISTRY_URL/$CI_PROJECT_PATH:$CI_COMMIT_SHA \
        --destination $REGISTRY_URL/$CI_PROJECT_PATH:latest
```

### 4. Trivy Security Scanning

#### 4.1 Local ECR Configuration
```yaml
variables:
  # Local ECR configuration for pipeline images
  LOCAL_ECR_URL: $LOCAL_ECR_URL
  LOCAL_ECR_USER: $LOCAL_ECR_USER
  LOCAL_ECR_PASSWORD: $LOCAL_ECR_PASSWORD
  PIPELINE_IMAGE_REGISTRY: $LOCAL_ECR_URL
```

#### 4.2 Trivy File System Scanning
```yaml
trivy-fs-scan:
  stage: {application_name}-security
  image: $PIPELINE_IMAGE_REGISTRY/trivy:latest
  script:
    - trivy fs --severity HIGH,CRITICAL --format json --output trivy-fs-report.json .
    - trivy fs --severity HIGH,CRITICAL --format table .
  artifacts:
    reports:
      container_scanning: trivy-fs-report.json
    paths:
      - trivy-fs-report.json
    expire_in: 1 week
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
```

#### 4.3 Trivy Dependency Scanning
```yaml
trivy-dependency-scan:
  stage: {application_name}-security
  image: $PIPELINE_IMAGE_REGISTRY/trivy:latest
  script:
    - |
      if [ -f "package.json" ]; then
        trivy fs --severity HIGH,CRITICAL --scanners vuln --format json --output trivy-dep-report.json .
      elif [ -f "requirements.txt" ]; then
        trivy fs --severity HIGH,CRITICAL --scanners vuln --format json --output trivy-dep-report.json .
      elif [ -f "pom.xml" ]; then
        trivy fs --severity HIGH,CRITICAL --scanners vuln --format json --output trivy-dep-report.json .
      elif [ -f "go.mod" ]; then
        trivy fs --severity HIGH,CRITICAL --scanners vuln --format json --output trivy-dep-report.json .
      fi
  artifacts:
    reports:
      dependency_scanning: trivy-dep-report.json
    paths:
      - trivy-dep-report.json
    expire_in: 1 week
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
```

#### 4.4 Trivy Container Scanning
```yaml
trivy-container-scan:
  stage: {application_name}-container-build
  image: $PIPELINE_IMAGE_REGISTRY/trivy:latest
  script:
    - trivy image --severity HIGH,CRITICAL --format json --output trivy-container-report.json $REGISTRY_URL/$CI_PROJECT_PATH:$CI_COMMIT_SHA
    - trivy image --severity HIGH,CRITICAL --format table $REGISTRY_URL/$CI_PROJECT_PATH:$CI_COMMIT_SHA
  artifacts:
    reports:
      container_scanning: trivy-container-report.json
    paths:
      - trivy-container-report.json
    expire_in: 1 week
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
```

### 5. Container Registry Integration

#### 5.1 Qual Registry Configuration
```yaml
variables:
  # Qual registry configuration
  REGISTRY_URL: $REGISTRY_URL
  REGISTRY_USER: $REGISTRY_USER
  REGISTRY_PASSWORD: $REGISTRY_PASSWORD
  IMAGE_TAG: $CI_COMMIT_SHA
  IMAGE_TAG_LATEST: "latest"
```

#### 5.2 Container Build and Push
```yaml
container-build:
  stage: {application_name}-container-build
  image: $PIPELINE_IMAGE_REGISTRY/kaniko:latest
  extends: .branch_validation
  before_script:
    - echo $REGISTRY_PASSWORD | kaniko login -u $REGISTRY_USER --password-stdin $REGISTRY_URL
  script:
    - |
      /kaniko/executor \
        --context $CI_PROJECT_DIR \
        --dockerfile $CI_PROJECT_DIR/Dockerfile \
        --destination $REGISTRY_URL/$CI_PROJECT_PATH:$IMAGE_TAG \
        --destination $REGISTRY_URL/$CI_PROJECT_PATH:$IMAGE_TAG_LATEST
  only:
    - main
    - develop
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
    - if: $CI_COMMIT_BRANCH == "develop"
      when: manual
```

### 6. GitLab CI/CD Variables

#### 6.1 Required Variables
Set these variables in GitLab project settings:

**Registry Variables:**
- `REGISTRY_URL` - Qual registry URL
- `REGISTRY_USER` - Registry username
- `REGISTRY_PASSWORD` - Registry password

**Local ECR Variables:**
- `LOCAL_ECR_URL` - Local ECR registry URL for pipeline images
- `LOCAL_ECR_USER` - Local ECR username
- `LOCAL_ECR_PASSWORD` - Local ECR password

**Kaniko Variables:**
- `KANIKO_VERSION` - Kaniko executor version (default: v1.9.1)

#### 6.2 Variable Security
- **NEVER hardcode credentials** in pipeline files
- **Use GitLab CI/CD variables** for all sensitive information
- **Set variables as protected** for sensitive data
- **Use variable substitution** for all credentials

### 7. GitLab-Specific Features

#### 7.1 Pipeline Formatting
- **MANDATORY**: Do not use emojis in pipeline files
- **Professional formatting** required for enterprise environments
- **Clear, descriptive messages** instead of emojis

**Examples:**
```yaml
# Avoid emojis in pipeline output
script:
  - echo "Starting deployment process..."  # Good
  - echo "ss Starting deployment..."       # Bad
```

#### 7.2 GitLab Caching
```yaml
cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - node_modules/
    - .npm/
    - .cache/
    - target/
    - .gradle/
```

#### 7.3 GitLab Artifacts
```yaml
artifacts:
  paths:
    - build/
    - dist/
    - coverage/
  reports:
    junit: test-results.xml
    coverage_report:
      coverage_format: cobertura
      path: coverage.xml
  expire_in: 1 week
```

#### 7.4 GitLab Rules
```yaml
rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - if: $CI_COMMIT_BRANCH =~ /^feature\/.*/
```

### 8. GitLab Environments

#### 8.1 Environment Configuration
```yaml
deploy-staging:
  stage: {application_name}-deploy
  environment:
    name: staging
    url: https://staging.example.com
  script:
    - echo "Deploying to staging environment..."
  only:
    - develop
  when: manual

deploy-production:
  stage: {application_name}-deploy
  environment:
    name: production
    url: https://production.example.com
  script:
    - echo "Deploying to production environment..."
  only:
    - main
  when: manual
```

### 9. GitLab Security Gates

#### 9.1 Pre-deployment Validation
```yaml
security-gates:
  stage: .pre
  script:
    - |
      echo "Checking security gates..."
      # Implement security gate logic here
      echo "Security gates passed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH =~ /^feature\/.*/
```

### 10. GitLab-Specific Implementation Checklist

- [ ] GitLab CI/CD file created with proper stage naming
- [ ] Branching strategy implemented (feature/* and main only)
- [ ] Ticket number validation added for feature branches
- [ ] Kaniko configuration added
- [ ] Trivy security scanning implemented with local ECR
- [ ] Qual registry integration configured
- [ ] All credentials moved to GitLab CI/CD variables
- [ ] No emojis used in pipeline files
- [ ] GitLab caching configured
- [ ] GitLab artifacts configured
- [ ] GitLab environments defined
- [ ] Security gates implemented

## GitLab-Specific Notes for LLM

1. **Use GitLab's built-in variables** where possible (`$CI_PROJECT_NAME`, `$CI_COMMIT_SHA`, etc.)
2. **Implement proper GitLab rules** for conditional job execution
3. **Use GitLab's caching mechanism** for performance optimization
4. **Configure GitLab environments** for deployment tracking
5. **Use GitLab's artifact system** for sharing files between jobs
6. **Implement GitLab's security scanning** integration
7. **Follow GitLab's best practices** for pipeline structure
8. **Use GitLab's manual approval** for production deployments
9. **Configure GitLab's protected variables** for sensitive data
10. **Test GitLab pipeline** thoroughly before deployment

## GitLab Expected Deliverables

1. **Complete `.gitlab-ci.yml` file** with all required stages and proper naming convention
2. **Branch validation rules** ensuring only feature/* and main branches are allowed
3. **Ticket number validation** for feature branches
4. **Trivy security scanning configuration** with local ECR images
5. **Kaniko container building** configuration
6. **Qual registry integration** setup
7. **GitLab CI/CD variables documentation** for required credentials
8. **GitLab environment configuration** for deployments

Remember to combine these GitLab-specific instructions with the generic CI/CD instructions for a complete implementation
8. **GitLab environment configuration** for deployments

Remember to combine these GitLab-specific instructions with the generic CI/CD instructions for a complete implementation