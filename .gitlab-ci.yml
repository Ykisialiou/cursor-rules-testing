# GitLab CI/CD Pipeline Configuration for pytonator
stages:
  - pytonator-build
  - pytonator-test
  - pytonator-security
  - pytonator-container-build
  - pytonator-deploy

# Global variables
variables:
  APPLICATION_NAME: "pytonator"
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  KANIKO_VERSION: "v1.9.1"

# Branch validation template
.branch_validation:
  before_script:
    - |
      # Validate ticket number pattern for feature branches
      if [[ $CI_COMMIT_BRANCH =~ ^feature/ ]]; then
        TICKET_PATTERN="^feature/[A-Z]+-[0-9]+|^feature/[0-9]+"
        if [[ ! $CI_COMMIT_BRANCH =~ $TICKET_PATTERN ]]; then
          echo "Error: Feature branch must contain ticket number (e.g., feature/TICKET-123 or feature/123-description)"
          echo "Current branch: $CI_COMMIT_BRANCH"
          exit 1
        fi
        echo "Feature branch validation passed: $CI_COMMIT_BRANCH"
      elif [[ $CI_COMMIT_BRANCH == "main" ]]; then
        echo "Main branch detected: $CI_COMMIT_BRANCH"
      else
        echo "Branch not allowed: $CI_COMMIT_BRANCH"
        echo "Only 'main' and 'feature/*' branches are allowed"
        exit 1
      fi

# Cache configuration
cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - .pip-cache/
    - .pytest-cache/
    - __pycache__/
    - .coverage

# Build stage
pytonator-build:
  stage: pytonator-build
  image: python:$PYTHON_VERSION-slim
  extends: .branch_validation
  before_script:
    - python --version
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - echo "Building pytonator application..."
    - python -c "from pytonator import create_app; app = create_app(); print('Flask app created successfully')"
    - python -m compileall pytonator/
    - echo "Build completed successfully"
  artifacts:
    paths:
      - pytonator/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH =~ /^feature\/.*/

# Test stage
pytonator-test:
  stage: pytonator-test
  image: python:$PYTHON_VERSION-slim
  extends: .branch_validation
  before_script:
    - python --version
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install -r requirements-dev.txt
  script:
    - echo "Running all tests..."
    - python -m pytest tests/ --cov=pytonator --cov-report=xml --cov-report=term-missing
    - echo "Running linting..."
    - flake8 pytonator/ tests/
    - black --check pytonator/ tests/
    - isort --check-only pytonator/ tests/
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    paths:
      - coverage.xml
      - htmlcov/
      - .coverage
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH =~ /^feature\/.*/

# Security scanning - File system scan
pytonator-security-fs:
  stage: pytonator-security
  image: $PIPELINE_IMAGE_REGISTRY/trivy:latest
  script:
    - echo "Running Trivy file system security scan..."
    - trivy fs --severity HIGH,CRITICAL --format json --output trivy-fs-report.json .
    - trivy fs --severity HIGH,CRITICAL --format table .
    - echo "File system security scan completed"
  artifacts:
    reports:
      container_scanning: trivy-fs-report.json
    paths:
      - trivy-fs-report.json
    expire_in: 1 week
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"

# Security scanning - Dependency scan
pytonator-security-deps:
  stage: pytonator-security
  image: $PIPELINE_IMAGE_REGISTRY/trivy:latest
  script:
    - echo "Running Trivy dependency security scan..."
    - trivy fs --severity HIGH,CRITICAL --scanners vuln --format json --output trivy-dep-report.json .
    - trivy fs --severity HIGH,CRITICAL --scanners vuln --format table .
    - echo "Dependency security scan completed"
  artifacts:
    reports:
      dependency_scanning: trivy-dep-report.json
    paths:
      - trivy-dep-report.json
    expire_in: 1 week
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"

# Container build
pytonator-container-build:
  stage: pytonator-container-build
  image: $PIPELINE_IMAGE_REGISTRY/kaniko:latest
  extends: .branch_validation
  before_script:
    - echo "Logging into container registry..."
    - echo "$REGISTRY_PASSWORD" | kaniko login -u "$REGISTRY_USER" --password-stdin "$REGISTRY_URL"
  script:
    - echo "Building pytonator container image..."
    - |
      /kaniko/executor \
        --context "$CI_PROJECT_DIR" \
        --dockerfile "$CI_PROJECT_DIR/Dockerfile" \
        --destination "$REGISTRY_URL/$CI_PROJECT_PATH:$CI_COMMIT_SHA" \
        --destination "$REGISTRY_URL/$CI_PROJECT_PATH:latest" \
        --cache=true \
        --compressed-caching=true
    - echo "Container build completed successfully"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
    - if: $CI_COMMIT_BRANCH == "develop"
      when: manual

# Container security scan
pytonator-container-scan:
  stage: pytonator-container-build
  image: $PIPELINE_IMAGE_REGISTRY/trivy:latest
  script:
    - echo "Running Trivy container security scan..."
    - trivy image --severity HIGH,CRITICAL --format json --output trivy-container-report.json "$REGISTRY_URL/$CI_PROJECT_PATH:$CI_COMMIT_SHA"
    - trivy image --severity HIGH,CRITICAL --format table "$REGISTRY_URL/$CI_PROJECT_PATH:$CI_COMMIT_SHA"
    - echo "Container security scan completed"
  artifacts:
    reports:
      container_scanning: trivy-container-report.json
    paths:
      - trivy-container-report.json
    expire_in: 1 week
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

# Deploy to staging
pytonator-deploy-staging:
  stage: pytonator-deploy
  image: alpine:latest
  environment:
    name: staging
    url: https://staging-pytonator.example.com
  extends: .branch_validation
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying pytonator to staging environment..."
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      when: manual

# Deploy to production
pytonator-deploy-production:
  stage: pytonator-deploy
  image: alpine:latest
  environment:
    name: production
    url: https://pytonator.example.com
  extends: .branch_validation
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying pytonator to production environment..."
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual

# Security gates
pytonator-security-gates:
  stage: .pre
  image: alpine:latest
  script:
    - echo "Checking pytonator security gates..."
    - echo "Validating branch naming convention..."
    - echo "Checking for required security scans..."
    - echo "Security gates passed for pytonator"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH =~ /^feature\/.*/
