# GitLab CI/CD Pipeline for Pytonator Flask Application
stages:
  - test
  - build
  - deploy

# Global variables
variables:
  APPLICATION_NAME: "pytonator"
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"

# Cache configuration
cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - .pip-cache/
    - .pytest-cache/
    - __pycache__/
    - .coverage

# Test stage
test:
  stage: test
  image: python:$PYTHON_VERSION-slim
  before_script:
    - python --version
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install -r requirements-dev.txt
  script:
    - echo "Running tests..."
    - python -m pytest tests/ --cov=pytonator --cov-report=xml --cov-report=term-missing
    - echo "Running linting..."
    - flake8 pytonator/ tests/
    - black --check pytonator/ tests/
    - isort --check-only pytonator/ tests/
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    paths:
      - coverage.xml
      - htmlcov/
      - .coverage
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH =~ /^feature\/.*/

# Build stage
build:
  stage: build
  image: python:$PYTHON_VERSION-slim
  before_script:
    - python --version
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - echo "Building Flask application..."
    - python -c "from pytonator import create_app; app = create_app(); print('Flask app created successfully')"
    - python -m compileall pytonator/
    - echo "Build completed successfully"
  artifacts:
    paths:
      - pytonator/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH =~ /^feature\/.*/

# Container build (optional)
container-build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "Setting up Docker..."
  script:
    - echo "Building Docker container..."
    - docker build -t pytonator:$CI_COMMIT_SHA .
    - docker tag pytonator:$CI_COMMIT_SHA pytonator:latest
    - echo "Container build completed successfully"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
    - if: $CI_COMMIT_BRANCH == "develop"
      when: manual

# Deploy to staging (optional)
deploy-staging:
  stage: deploy
  image: alpine:latest
  environment:
    name: staging
    url: https://staging-pytonator.example.com
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to staging environment..."
    - echo "Staging deployment completed"
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      when: manual

# Deploy to production (optional)
deploy-production:
  stage: deploy
  image: alpine:latest
  environment:
    name: production
    url: https://pytonator.example.com
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to production environment..."
    - echo "Production deployment completed"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
